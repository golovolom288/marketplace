import os
import telebot
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
QR_CODE_PATH = os.getenv("QR_CODE_PATH")

bot = telebot.TeleBot(TOKEN)
user_data = {}
user_sessions = {}

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"))
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ 'üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /contact.", reply_markup=get_main_menu())

@bot.message_handler(func=lambda message: message.text == "üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
def new_order(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã üõí.")
    user_data[message.chat.id] = {"step": "waiting_for_screenshot"}

@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = message.chat.id

    if user_data.get(user_id, {}).get("step") == "waiting_for_screenshot":
        file_id = message.photo[-1].file_id
        user_data[user_id]["screenshot"] = file_id
        user_data[user_id]["step"] = "waiting_for_address"

        bot.send_message(user_id, "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    else:
        bot.send_message(user_id, "‚ö† –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑. –î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑'.")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_for_address")
def handle_address(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.chat.id
    user_data[user_id]["address"] = message.text
    user_data[user_id]["step"] = "waiting_for_phone"

    bot.send_message(user_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_for_phone")
def handle_phone(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    user_id = message.chat.id
    user_data[user_id]["phone"] = message.text
    user_data[user_id]["step"] = "waiting_for_payment"

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ QR-–∫–æ–¥—É"), KeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"))

    bot.send_message(user_id, "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "waiting_for_payment")
def handle_payment(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç QR-–∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    user_id = message.chat.id
    payment_method = message.text

    if payment_method == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ QR-–∫–æ–¥—É":
        user_data[user_id]["payment"] = "QR-–∫–æ–¥"
        user_data[user_id]["step"] = "waiting_for_payment_confirmation"

        with open(QR_CODE_PATH, "rb") as qr_code:
            bot.send_photo(user_id, qr_code, caption="üì≤ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ QR-–∫–æ–¥—É –∏ –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif payment_method == "üíµ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏":
        user_data[user_id]["payment"] = "–ù–∞–ª–∏—á–Ω—ã–µ"
        user_data[user_id]["step"] = "waiting_for_admin_confirmation"

    send_order_to_admin(user_id)

def send_order_to_admin(user_id):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É"""
    data = user_data.get(user_id, {})
    if not data:
        return

    order_text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
    order_text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
    order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    order_text += f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']}\n\n"
    order_text += "‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è..."

    screenshot_file_id = data.get("screenshot")
    if screenshot_file_id:
        bot.send_photo(ADMIN_ID, screenshot_file_id, caption=order_text)
    else:
        bot.send_message(ADMIN_ID, order_text)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))

    bot.send_message(ADMIN_ID, "‚ö° –ü—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=keyboard)

@bot.message_handler(commands=['contact'])
def contact_admin(message):
    """–°–æ–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_sessions[message.chat.id] = ADMIN_ID
    user_sessions[ADMIN_ID] = message.chat.id

    bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")
    bot.send_message(message.chat.id, "‚úÖ –í—ã —Å–≤—è–∑–∞–Ω—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω –µ–≥–æ –ø–æ–ª—É—á–∏—Ç.\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop")

@bot.message_handler(commands=['stop'])
def stop_chat(message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∞–¥–º–∏–Ω—É –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É"""
    if message.chat.id in user_sessions:
        other_party = user_sessions.pop(message.chat.id)
        if other_party in user_sessions:
            del user_sessions[other_party]

        bot.send_message(message.chat.id, "‚ùå –ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /contact, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º.")
        bot.send_message(other_party, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É.") if other_party != ADMIN_ID else None

@bot.message_handler(func=lambda message: message.chat.id in user_sessions and message.chat.id != ADMIN_ID)
def forward_to_admin(message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É"""
    bot.send_message(ADMIN_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}:\n{message.text}")
    user_sessions[ADMIN_ID] = message.chat.id

@bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID)
def reply_from_admin(message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if ADMIN_ID not in user_sessions:
        bot.send_message(ADMIN_ID, "‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_id = user_sessions.get(ADMIN_ID)
    if user_id:
        bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
    else:
        bot.send_message(ADMIN_ID, "‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == '__main__':
    bot.polling(none_stop=True)